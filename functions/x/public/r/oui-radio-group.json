{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-radio-group",
  "type": "registry:ui",
  "dependencies": [
    "react-aria-components",
    "lucide-react",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "http://localhost:5173/r/oui-field-error.json",
    "http://localhost:5173/r/oui-label.json",
    "http://localhost:5173/r/oui-text.json"
  ],
  "files": [
    {
      "path": "registry/components/ui/oui-radio-group.tsx",
      "content": "import type React from \"react\";\nimport { CircleIcon } from \"lucide-react\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\nimport {\n  composeTailwindRenderProps,\n  groupFocusVisibleStyles,\n} from \"@/registry/components/ui/oui-base\";\nimport { FieldError } from \"@/registry/components/ui/oui-field-error\";\nimport { Label, labelComponentStyles } from \"@/registry/components/ui/oui-label\";\nimport { Text } from \"@/registry/components/ui/oui-text\";\n\n/**\n * Derived from shadcn RadioGroup\n */\nexport function RadioGroup({ className, ...props }: Rac.RadioGroupProps) {\n  return (\n    <Rac.RadioGroup\n      data-slot=\"radio-group\"\n      className={composeTailwindRenderProps(className, \"grid gap-3\")}\n      {...props}\n    />\n  );\n}\n\nexport interface RadioProps extends Rac.RadioProps {\n  radioGroupItemClassName?: string;\n}\n\n/**\n * Derived from shadcn FormDemo FormItem and RadioGroupItem\n * Radix has RadioGroupPrimitive.Item which is separate from label while RAC structures with a label.\n */\nexport function Radio({\n  className,\n  children,\n  radioGroupItemClassName,\n  ...props\n}: RadioProps) {\n  return (\n    <Rac.Radio\n      className={composeTailwindRenderProps(className, [\n        labelComponentStyles,\n        \"group items-start gap-3\",\n      ])}\n      {...props}\n    >\n      {(renderProps) => (\n        <>\n          <div\n            data-slot=\"radio-group-item\"\n            className={twMerge(\n              [\n                groupFocusVisibleStyles,\n                \"border-input text-primary dark:bg-input/30 shadow-xs relative aspect-square size-4 shrink-0 rounded-full border transition-[color,box-shadow]\",\n                \"group-data-[invalid]:ring-destructive/20 group-data-[invalid]:dark:ring-destructive/40 group-data-[invalid]:border-destructive\",\n              ],\n              radioGroupItemClassName,\n            )}\n          >\n            {renderProps.isSelected && (\n              <CircleIcon\n                data-slot=\"radio-group-indicator\"\n                className=\"fill-primary absolute left-1/2 top-1/2 size-2 -translate-x-1/2 -translate-y-1/2\"\n              />\n            )}\n          </div>\n          {typeof children === \"function\" ? children(renderProps) : children}\n        </>\n      )}\n    </Rac.Radio>\n  );\n}\n\nexport interface RadioGroupExProps extends Rac.RadioGroupProps {\n  label?: React.ReactNode;\n  description?: React.ReactNode;\n  errorMessage?: string | ((validation: Rac.ValidationResult) => string);\n}\n\nexport function RadioGroupEx({\n  label,\n  description,\n  errorMessage,\n  children,\n  ...props\n}: RadioGroupExProps) {\n  return (\n    <RadioGroup {...props}>\n      {(renderProps) => (\n        <>\n          {label && <Label className=\"\">{label}</Label>}\n          {description && <Text slot=\"description\">{description}</Text>}\n          {typeof children === \"function\" ? children(renderProps) : children}\n          <FieldError>{errorMessage}</FieldError>\n        </>\n      )}\n    </RadioGroup>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}