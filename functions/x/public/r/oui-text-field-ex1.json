{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-text-field-ex1",
  "type": "registry:component",
  "registryDependencies": [
    "http://localhost:5173/r/oui-text-field.json",
    "http://localhost:5173/r/oui-input.json",
    "http://localhost:5173/r/oui-label.json",
    "http://localhost:5173/r/oui-field-error.json",
    "http://localhost:5173/r/oui-text.json"
  ],
  "files": [
    {
      "path": "registry/components/oui-text-field-ex1.tsx",
      "content": "import { FieldError } from \"@/registry/components/ui/oui-field-error\";\nimport { Input } from \"@/registry/components/ui/oui-input\";\nimport { Label } from \"@/registry/components/ui/oui-label\";\nimport { Text } from \"@/registry/components/ui/oui-text\";\nimport { TextField } from \"@/registry/components/ui/oui-text-field\";\nimport * as Rac from \"react-aria-components\";\n\nexport interface TextFieldEx1Props extends Rac.TextFieldProps {\n  label?: React.ReactNode;\n  description?: React.ReactNode;\n  errorMessage?: string | ((validation: Rac.ValidationResult) => string);\n  placeholder?: string;\n}\n\n/**\n * A TextField component where the label and input are arranged side-by-side.\n */\nexport function TextFieldEx1({\n  label,\n  description,\n  errorMessage,\n  placeholder,\n  children,\n  ...props\n}: TextFieldEx1Props) {\n  return (\n    <TextField {...props}>\n      {(renderProps) => (\n        <>\n          <div className=\"grid grid-cols-3 items-center gap-4\">\n            {label && typeof label === \"string\" ? (\n              <Label>{label}</Label>\n            ) : (\n              label\n            )}\n            {children ? (\n              typeof children === \"function\" ? (\n                children(renderProps)\n              ) : (\n                children\n              )\n            ) : (\n              <Input\n                placeholder={placeholder}\n                className={label ? \"col-span-2\" : \"col-span-3\"}\n              />\n            )}\n          </div>\n          {description && <Text slot=\"description\">{description}</Text>}\n          <FieldError>{errorMessage}</FieldError>\n        </>\n      )}\n    </TextField>\n  );\n}\n\nexport default function Component() {\n  return (\n    <TextFieldEx1\n      label=\"Label\"\n      placeholder=\"Placeholder\"\n      description=\"This is a text field.\"\n    />\n  );\n}\n",
      "type": "registry:component"
    }
  ],
  "meta": {
    "tags": [
      "text field"
    ]
  }
}