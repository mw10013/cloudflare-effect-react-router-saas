{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-menu",
  "type": "registry:ui",
  "dependencies": [
    "react-aria-components",
    "lucide-react"
  ],
  "registryDependencies": [
    "http://localhost:5173/r/oui-base.json",
    "http://localhost:5173/r/oui-button.json",
    "http://localhost:5173/r/oui-popover.json"
  ],
  "files": [
    {
      "path": "registry/components/ui/oui-menu.tsx",
      "content": "import React from \"react\";\nimport { cva } from \"class-variance-authority\";\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\nimport { composeTailwindRenderProps } from \"@/registry/components/ui/oui-base\";\nimport { Button } from \"@/registry/components/ui/oui-button\";\nimport { Popover } from \"@/registry/components/ui/oui-popover\";\n\n/**\n * Derived from shadcn DropdownMenuContent\n */\nexport function Menu<T extends object>({\n  className,\n  ...props\n}: Rac.MenuProps<T>) {\n  return (\n    <Rac.Menu\n      className={composeTailwindRenderProps(\n        className,\n        \"w-full min-w-[8rem] overflow-y-auto overflow-x-hidden p-1\",\n      )}\n      {...props}\n    />\n  );\n}\n\n/**\n * Derived from shadcn DropdownMenuItem\n */\nexport const menuItemVariants = cva(\n  [\n    \"relative flex cursor-default select-none items-center gap-x-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors\",\n    '[&_svg:not([class*=\"text-\"])]:text-muted-foreground [&_svg:not([class*=\"size-\"])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0',\n    \"data-[focused]:bg-accent data-[focused]:text-accent-foreground\",\n    \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n  ],\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        destructive: [\n          \"text-destructive [&_svg]:text-destructive\",\n          \"data-[focused]:bg-destructive/10 data-[focused]:text-destructive dark:data-[focused]:bg-destructive/20\",\n        ],\n      },\n      selectionMode: {\n        none: \"\",\n        single: \"pl-8\",\n        multiple: \"pl-8\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      selectionMode: \"none\",\n    },\n  },\n);\n\nexport interface MenuItemProps<T extends object> extends Rac.MenuItemProps<T> {\n  variant?: \"default\" | \"destructive\";\n}\n\n/**\n * Derived from shadcn DropdownMenuCheckboxItem and DropdownMenuRadioGroup\n */\nexport function MenuItem<T extends object>({\n  className,\n  variant,\n  children,\n  ...props\n}: MenuItemProps<T>) {\n  return (\n    <Rac.MenuItem\n      {...props}\n      className={Rac.composeRenderProps(className, (className, renderProps) =>\n        twMerge(\n          menuItemVariants({\n            variant,\n            ...renderProps,\n            className,\n          }),\n        ),\n      )}\n    >\n      {({ isSelected, selectionMode, hasSubmenu, ...renderProps }) => {\n        const isCheckboxItem = isSelected && selectionMode === \"multiple\";\n        const isRadioItem = isSelected && selectionMode === \"single\";\n\n        return (\n          <>\n            {isCheckboxItem && (\n              <span className=\"absolute left-2 flex size-3.5 items-center justify-center\">\n                <CheckIcon className=\"size-4\" />\n              </span>\n            )}\n            {isRadioItem && (\n              <span className=\"absolute left-2 flex size-3.5 items-center justify-center\">\n                <CircleIcon className=\"size-2 fill-current\" />\n              </span>\n            )}\n            {typeof children === \"function\"\n              ? children({\n                  isSelected,\n                  selectionMode,\n                  hasSubmenu,\n                  ...renderProps,\n                })\n              : children}\n            {hasSubmenu && <ChevronRightIcon className=\"ml-auto size-4\" />}\n          </>\n        );\n      }}\n    </Rac.MenuItem>\n  );\n}\n\ninterface MenuExProps<T> extends Rac.MenuProps<T> {\n  triggerElement: string | React.ReactElement;\n}\n\n/**\n * If `triggerElement` is a string, it's rendered as a ghost `Button`.\n */\nexport function MenuEx<T extends object>({\n  triggerElement,\n  children,\n  ...rest\n}: MenuExProps<T>) {\n  return (\n    <Rac.MenuTrigger>\n      {typeof triggerElement === \"string\" ? (\n        <Button variant=\"ghost\">{triggerElement}</Button>\n      ) : (\n        triggerElement\n      )}\n      <Popover>\n        <Menu {...rest}>{children}</Menu>\n      </Popover>\n    </Rac.MenuTrigger>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}