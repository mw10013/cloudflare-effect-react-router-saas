{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-dialog",
  "type": "registry:ui",
  "dependencies": [
    "react-aria-components",
    "lucide-react",
    "class-variance-authority",
    "tailwind-merge"
  ],
  "registryDependencies": [
    "http://localhost:5173/r/oui-button.json",
    "http://localhost:5173/r/oui-heading.json",
    "http://localhost:5173/r/oui-modal.json"
  ],
  "files": [
    {
      "path": "registry/components/ui/oui-dialog.tsx",
      "content": "import type { VariantProps } from \"class-variance-authority\";\nimport type { ReactElement, ReactNode } from \"react\";\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useRef,\n  useState,\n} from \"react\";\nimport { ModalEx } from \"@/registry/components/oui-modal-ex\";\nimport { Button } from \"@/registry/components/ui/oui-button\";\nimport { Heading } from \"@/registry/components/ui/oui-heading\";\nimport {\n  ModalEx1,\n  sheetModalVariants,\n} from \"@/registry/components/ui/oui-modal\";\nimport { XIcon } from \"lucide-react\";\nimport * as Rac from \"react-aria-components\";\nimport { twJoin, twMerge } from \"tailwind-merge\";\n\nexport interface DialogProps extends Rac.DialogProps {\n  /**\n   * If `true`, hides the close button for non-'alertdialog' role.\n   * 'alertdialog' role never shows a close button.\n   * @default false\n   */\n  hideCloseButtonForNonAlert?: boolean;\n}\n\n/**\n * Derived from shadcn DialogContent.\n */\nexport function Dialog({\n  hideCloseButtonForNonAlert = false,\n  className,\n  children,\n  ...props\n}: DialogProps) {\n  return (\n    <Rac.Dialog\n      className={twMerge(\"grid gap-4 outline-none\", className)}\n      {...props}\n    >\n      {(renderProps) => (\n        <>\n          {typeof children === \"function\" ? children(renderProps) : children}\n          {!hideCloseButtonForNonAlert && props.role !== \"alertdialog\" && (\n            <Rac.Button\n              slot=\"close\"\n              className={twJoin(\n                \"absolute top-4 right-4 rounded-sm p-1 opacity-70 transition-opacity\",\n                \"data-[hovered]:bg-accent data-[hovered]:text-muted-foreground data-[hovered]:opacity-100\",\n                \"data-[focus-visible]:ring-2 data-[focus-visible]:ring-ring data-[focus-visible]:ring-offset-2 data-[focus-visible]:ring-offset-background data-[focus-visible]:outline-none\",\n                \"data-[disabled]:pointer-events-none\",\n              )}\n            >\n              <XIcon className=\"size-4\" />\n              <span className=\"sr-only\">Close</span>\n            </Rac.Button>\n          )}\n        </>\n      )}\n    </Rac.Dialog>\n  );\n}\n\n/**\n * Derived from shadcn DialogHeader\n */\nexport function DialogHeader({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      {...props}\n      className={twMerge(\n        \"flex flex-col gap-2 text-center sm:text-left\",\n        className,\n      )}\n    />\n  );\n}\n\n/**\n * Derived from shadcn DialogFooter\n */\nexport function DialogFooter({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      {...props}\n      className={twMerge(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className,\n      )}\n    />\n  );\n}\n\n/**\n * Derived from shadcn DialogDescription\n */\nexport function DialogDescription({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLParagraphElement>) {\n  return (\n    <p\n      {...props}\n      className={twMerge(\"text-sm text-muted-foreground\", className)}\n    />\n  );\n}\n\nexport interface DialogEx1AlertProps\n  extends Rac.DialogProps,\n    Pick<Rac.ModalOverlayProps, \"isOpen\" | \"onOpenChange\" | \"defaultOpen\"> {\n  type?: \"confirm\" | \"acknowledge\";\n  title: React.ReactNode;\n  children: React.ReactNode;\n  confirmLabel?: string;\n  cancelLabel?: string;\n  onConfirm?: () => void;\n  onCancel?: () => void;\n  modalClassName?: string;\n}\n\n/**\n * A modal confirmation or acknowledgement dialog with a title, message, and\n * customizable action buttons. It is not dismissable by an outside press.\n *\n * - `type=\"confirm\"` (default): Renders \"Confirm\" and \"Cancel\" buttons.\n * - `type=\"acknowledge\"`: Renders a single \"Acknowledge\" button.\n */\nexport function DialogEx1Alert({\n  type = \"confirm\",\n  title,\n  children,\n  confirmLabel = type === \"confirm\" ? \"Continue\" : \"OK\",\n  cancelLabel = \"Cancel\",\n  onConfirm,\n  onCancel,\n  modalClassName,\n  isOpen,\n  onOpenChange,\n  defaultOpen,\n  ...props\n}: DialogEx1AlertProps) {\n  return (\n    <ModalEx\n      className={modalClassName}\n      isDismissable={false}\n      isOpen={isOpen}\n      onOpenChange={onOpenChange}\n      defaultOpen={defaultOpen}\n    >\n      <Dialog role=\"alertdialog\" {...props}>\n        <DialogHeader>\n          <Heading variant=\"alert\" slot=\"title\">\n            {title}\n          </Heading>\n          <DialogDescription>{children}</DialogDescription>\n        </DialogHeader>\n        <DialogFooter>\n          {type === \"confirm\" && (\n            <Button variant=\"outline\" slot=\"close\" autoFocus onPress={onCancel}>\n              {cancelLabel}\n            </Button>\n          )}\n          <Button\n            slot=\"close\"\n            onPress={onConfirm}\n            autoFocus={type === \"acknowledge\"}\n          >\n            {confirmLabel}\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </ModalEx>\n  );\n}\n\ntype DialogEx1AlertOptions = Omit<\n  DialogEx1AlertProps,\n  \"isOpen\" | \"onOpenChange\" | \"defaultOpen\" | \"onConfirm\" | \"onCancel\"\n>;\n\ninterface DialogEx1AlertContextType {\n  show: (options: DialogEx1AlertOptions) => Promise<boolean>;\n}\n\nconst DialogEx1AlertContext = createContext<\n  DialogEx1AlertContextType | undefined\n>(undefined);\n\nexport function useDialogEx1Alert() {\n  const context = useContext(DialogEx1AlertContext);\n  if (!context) {\n    throw new Error(\n      \"useDialogEx1Alert must be used within a DialogEx1AlertProvider\",\n    );\n  }\n  return context;\n}\n\n/**\n * This provider manages a global alert dialog.\n */\nexport function DialogEx1AlertProvider({ children }: { children: ReactNode }) {\n  /* We use a promise-based approach to allow for async/await usage.\n   * `useRef` stores the promise's `resolve` function across renders without\n   * causing re-renders. When the user confirms or cancels, this `resolve`\n   * function is called to fulfill the promise.\n   *\n   * `useCallback` memoizes the `show` function to prevent consumers of the\n   * context from re-rendering unnecessarily, which is a performance\n   * optimization.\n   */\n  const [options, setOptions] = useState<DialogEx1AlertOptions | null>(null);\n  const promiseRef = useRef<{ resolve: (value: boolean) => void } | null>(null);\n\n  const show = useCallback((newOptions: DialogEx1AlertOptions) => {\n    setOptions(newOptions);\n    return new Promise<boolean>((resolve) => {\n      promiseRef.current = { resolve };\n    });\n  }, []);\n\n  const handleClose = (confirmed: boolean) => {\n    if (promiseRef.current) {\n      promiseRef.current.resolve(confirmed);\n    }\n    setOptions(null);\n    promiseRef.current = null;\n  };\n\n  return (\n    <DialogEx1AlertContext.Provider value={{ show }}>\n      {children}\n      {options && (\n        <DialogEx1Alert\n          {...options}\n          isOpen\n          onConfirm={() => {\n            handleClose(true);\n          }}\n          onCancel={() => {\n            handleClose(false);\n          }}\n        />\n      )}\n    </DialogEx1AlertContext.Provider>\n  );\n}\n\nexport interface DialogEx2SheetProps\n  extends Omit<DialogProps, \"role\">, // Prevent 'alertdialog' role\n    Pick<VariantProps<typeof sheetModalVariants>, \"side\"> {\n  triggerElement: string | ReactElement;\n  modalClassName?: string;\n  overlayClassName?: string;\n}\n\n/**\n * A sheet modal that slides in from a side of the screen.\n * The modal is always dismissable via an outside press.\n */\nexport function DialogEx2Sheet({\n  triggerElement,\n  modalClassName,\n  overlayClassName,\n  side,\n  ...props\n}: DialogEx2SheetProps) {\n  return (\n    <Rac.DialogTrigger>\n      {typeof triggerElement === \"string\" ? (\n        <Button variant=\"ghost\">{triggerElement}</Button>\n      ) : (\n        triggerElement\n      )}\n      <ModalEx1\n        className={modalClassName}\n        overlayClassName={overlayClassName}\n        side={side}\n        isDismissable\n      >\n        <Dialog {...props} />\n      </ModalEx1>\n    </Rac.DialogTrigger>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}