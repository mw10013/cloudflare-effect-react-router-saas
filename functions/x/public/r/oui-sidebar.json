{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-sidebar",
  "type": "registry:ui",
  "dependencies": [
    "react-aria-components",
    "lucide-react"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "../oui/src/oui-sidebar.tsx",
      "content": "import type { VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { useSidebar } from \"@workspace/ui/components/ui/sidebar\";\nimport { cva } from \"class-variance-authority\";\nimport { ChevronRight, PanelLeftIcon } from \"lucide-react\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\nimport { composeTailwindRenderProps } from \"./oui-base\";\nimport { Button } from \"./oui-button\";\n\nexport function SidebarTrigger({\n  \"aria-label\": ariaLabel,\n  \"aria-labelledby\": ariaLabelledBy,\n  className,\n  onPress,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      aria-label={!ariaLabel && !ariaLabelledBy ? \"Toggle sidebar\" : ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={composeTailwindRenderProps(className, \"size-7\")}\n      onPress={(e) => {\n        onPress?.(e);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n    </Button>\n  );\n}\n\n/**\n * Derived from shadcn SidebarMenu\n */\nexport function SidebarListBox<T extends object>({\n  className,\n  ...props\n}: Rac.ListBoxProps<T>) {\n  return (\n    <Rac.ListBox<T>\n      className={composeTailwindRenderProps(\n        className,\n        \"flex w-full min-w-0 flex-col gap-1\",\n      )}\n      data-slot=\"sidebar-listbox\"\n      {...props}\n    />\n  );\n}\n\nexport interface SidebarListBoxSectionProps<T extends object = object>\n  extends Rac.ListBoxSectionProps<T> {\n  title: React.ReactNode;\n}\n\n/**\n * Derived from shadcn SidebarGroup, SidebarGroupLabel, and SidebarGroupContent\n */\nexport function SidebarListBoxSection<T extends object>({\n  className,\n  title,\n  items,\n  children,\n  ...props\n}: SidebarListBoxSectionProps<T>) {\n  return (\n    <Rac.ListBoxSection<T>\n      className={twMerge(\n        \"relative flex w-full min-w-0 flex-col p-2\",\n        className,\n      )}\n      {...props}\n    >\n      <Rac.Header className=\"text-sidebar-foreground/70 ring-sidebar-ring outline-hidden flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0 [&>svg]:size-4 [&>svg]:shrink-0\">\n        {title}\n      </Rac.Header>\n      <div className=\"w-full text-sm\">\n        <Rac.Collection items={items}>{children}</Rac.Collection>\n      </div>\n    </Rac.ListBoxSection>\n  );\n}\n\nexport const sidebarListBoxItemVariants = cva(\n  [\n    \"group/menu-item relative\", // from SidebarMenuItem\n    \"peer/menu-button outline-hidden ring-sidebar-ring flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm transition-[width,height,padding]\",\n    \"group-has-data-[sidebar=menu-action]/menu-item:pr-8\", // Adjusted from -has-data-[sidebar=menu-action]/menu-item:pr-8\n    \"[&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n    // States from sidebarMenuButtonVariants\n    \"data-[hovered]:bg-sidebar-accent data-[hovered]:text-sidebar-accent-foreground\",\n    \"data-[focused]:ring-2\", // from focus-visible:ring-2\n    \"data-[focus-visible]:ring-2\", // RAC uses focus-visible\n    \"data-[pressed]:bg-sidebar-accent data-[pressed]:text-sidebar-accent-foreground\", // from active:\n    \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n    \"data-[selected]:bg-sidebar-accent data-[selected]:text-sidebar-accent-foreground data-[selected]:font-medium\", // from data-[active=true]\n    // data-[state=open] is not directly applicable to ListBoxItem, but hover styles are covered\n    \"group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2!\", // These are from the parent context, might need adjustment or removal if not applicable via RAC props\n  ],\n  {\n    variants: {\n      variant: {\n        default:\n          \"data-[hovered]:bg-sidebar-accent data-[hovered]:text-sidebar-accent-foreground\", // from hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\n        outline:\n          \"bg-background data-[hovered]:bg-sidebar-accent data-[hovered]:text-sidebar-accent-foreground shadow-[0_0_0_1px_hsl(var(--sidebar-border))] data-[hovered]:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"group-data-[collapsible=icon]:p-0! h-12 text-sm\", // This might also need context adjustment\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface SidebarListBoxItemProps<T extends object = object>\n  extends Rac.ListBoxItemProps<T>,\n    VariantProps<typeof sidebarListBoxItemVariants> {}\n\n/**\n * Derived from shadcn SidebarMenuButton and SidebarMenuItem\n */\nexport function SidebarListBoxItem<T extends object>({\n  className,\n  variant,\n  size,\n  ...props\n}: SidebarListBoxItemProps<T>) {\n  return (\n    <Rac.ListBoxItem<T>\n      {...props}\n      className={Rac.composeRenderProps(className, (className, renderProps) =>\n        twMerge(\n          sidebarListBoxItemVariants({\n            ...renderProps,\n            variant,\n            size,\n            className,\n          }),\n        ),\n      )}\n    />\n  );\n}\n\nexport interface SidebarTreeNodeEx {\n  id: string;\n  title?: string;\n  href?: string;\n  'data-testid'?: string;\n  children?: SidebarTreeNodeEx[];\n}\n\nexport interface SidebarTreeItemContentExProps\n  extends Rac.TreeItemContentProps {\n  href?: string;\n}\n\nexport function SidebarTreeItemContentEx({\n  children,\n  href,\n  ...props\n}: SidebarTreeItemContentExProps) {\n  return (\n    <Rac.TreeItemContent {...props}>\n      {(renderProps) => {\n        return (\n          <div\n            className={twMerge(\n              \"text-sidebar-foreground ring-sidebar-ring outline-hidden flex h-8 shrink-0 items-center rounded-md px-2 text-sm transition-[margin,opacity] duration-200 ease-linear [&>svg]:size-4 [&>svg]:shrink-0\",\n              \"data-[hovered]:bg-transparent data-[hovered]:text-current dark:data-[hovered]:bg-transparent\",\n              renderProps.hasChildItems && \"font-medium\",\n              renderProps.isHovered &&\n                \"bg-sidebar-accent text-sidebar-accent-foreground\",\n              renderProps.isFocusVisible && \"ring-2\",\n              href ? \"cursor-pointer\" : \"cursor-default\",\n            )}\n          >\n            {typeof children === \"function\" ? children(renderProps) : children}\n            {renderProps.hasChildItems && (\n              <Button\n                slot=\"chevron\"\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"ml-auto\"\n              >\n                <ChevronRight\n                  className={twMerge(\n                    \"transition-transform\",\n                    renderProps.isExpanded && \"rotate-90\",\n                  )}\n                />\n              </Button>\n            )}\n          </div>\n        );\n      }}\n    </Rac.TreeItemContent>\n  );\n}\n\nexport interface SidebarTreeItemPropsEx extends Partial<Rac.TreeItemProps> {\n  title: string;\n}\n\nexport function SidebarTreeItemEx({\n  title,\n  className,\n  children,\n  ...props\n}: SidebarTreeItemPropsEx) {\n  return (\n    <Rac.TreeItem\n      textValue={title}\n      {...props}\n      className={Rac.composeRenderProps(className, (className, renderProps) =>\n        twMerge(\n          \"outline-none\",\n          renderProps.hasChildItems && \"mt-4 first:mt-0\",\n          renderProps.isFocusVisible && \"relative z-10\",\n          className,\n        ),\n      )}\n    >\n      <SidebarTreeItemContentEx href={props.href}>\n        {title}\n      </SidebarTreeItemContentEx>\n      {children}\n    </Rac.TreeItem>\n  );\n}\n\n/**\n * Derived from SidebarGroup\n */\nexport function SidebarTreeEx(props: Rac.TreeProps<SidebarTreeNodeEx>) {\n  return (\n    <Rac.Tree {...props} className=\"relative flex w-full min-w-0 flex-col p-2\">\n      {function renderSidebarTreeNodeEx(item) {\n        return (\n          <SidebarTreeItemEx\n            key={item.id}\n            id={item.id}\n            title={item.title ?? item.id}\n            href={item.href}\n            data-testid={item[\"data-testid\"]}\n          >\n            <Rac.Collection items={item.children}>\n              {renderSidebarTreeNodeEx}\n            </Rac.Collection>\n          </SidebarTreeItemEx>\n        );\n      }}\n    </Rac.Tree>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}