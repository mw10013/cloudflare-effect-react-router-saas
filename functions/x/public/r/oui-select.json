{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-select",
  "type": "registry:ui",
  "dependencies": [
    "react-aria-components",
    "lucide-react"
  ],
  "registryDependencies": [
    "http://localhost:5173/r/oui-field-error.json",
    "http://localhost:5173/r/oui-label.json",
    "http://localhost:5173/r/oui-popover.json",
    "http://localhost:5173/r/oui-text.json"
  ],
  "files": [
    {
      "path": "registry/components/ui/oui-select.tsx",
      "content": "import * as React from \"react\";\nimport { ChevronDown } from \"lucide-react\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\nimport {\n  composeTailwindRenderProps,\n  disabledStyles,\n  focusVisibleStyles,\n} from \"@/registry/components/ui/oui-base\";\nimport { FieldError } from \"@/registry/components/ui/oui-field-error\";\nimport { Label } from \"@/registry/components/ui/oui-label\";\nimport { Popover } from \"@/registry/components/ui/oui-popover\";\nimport { Text } from \"@/registry/components/ui/oui-text\";\n\nexport function Select<T extends object>({\n  className,\n  ...props\n}: Rac.SelectProps<T>) {\n  return (\n    <Rac.Select\n      data-slot=\"select\"\n      className={composeTailwindRenderProps(className, \"grid gap-2\")}\n      {...props}\n    />\n  );\n}\n\nexport function SelectButton({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: Rac.ButtonProps & {\n  size?: \"sm\" | \"default\";\n}) {\n  return (\n    <Rac.Button\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={composeTailwindRenderProps(className, [\n        focusVisibleStyles,\n        disabledStyles,\n        \"border-input [&_svg:not([class*='text-'])]:text-muted-foreground dark:bg-input/30 dark:data-[hovered]:bg-input/50 shadow-xs flex w-fit items-center justify-between gap-2 whitespace-nowrap rounded-md border bg-transparent px-3 py-2 text-sm outline-none transition-[color,box-shadow] data-[size=default]:h-9 data-[size=sm]:h-8 data-[disabled]:cursor-not-allowed *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg:not([class*='size-'])]:size-4 [&_svg]:pointer-events-none [&_svg]:shrink-0\",\n      ])}\n      {...props}\n    >\n      {Rac.composeRenderProps(children, (children) => (\n        <>\n          {children}\n          <ChevronDown className=\"size-4 opacity-50\" aria-hidden=\"true\" />\n        </>\n      ))}\n    </Rac.Button>\n  );\n}\n\nexport function SelectValue<T extends object>({\n  className,\n  ...props\n}: Rac.SelectValueProps<T>) {\n  return (\n    <Rac.SelectValue\n      data-slot=\"select-value\"\n      className={Rac.composeRenderProps(\n        className,\n        (className, { isPlaceholder }) =>\n          twMerge(isPlaceholder ? \"text-muted-foreground\" : \"\", className),\n      )}\n      {...props}\n    />\n  );\n}\n\ninterface SelectExProps<T extends object>\n  extends Omit<Rac.SelectProps<T>, \"children\"> {\n  label?: React.ReactNode;\n  description?: React.ReactNode;\n  errorMessage?: string | ((validation: Rac.ValidationResult) => string);\n  items?: Iterable<T>;\n  children: React.ReactNode | ((item: T) => React.ReactNode);\n  buttonClassName?: string;\n  /**\n   * A render function to customize the display of the selected value or placeholder.\n   * Receives `isPlaceholder` and `defaultChildren` (the placeholder string or default rendered item).\n   */\n  renderSelectValue?: (\n    props: Rac.SelectValueRenderProps<T> & {\n      defaultChildren: React.ReactNode | undefined;\n    },\n  ) => React.ReactNode;\n}\n\n/**\n * @example\n *\n * ```tsx\n * <Oui.SelectEx\n *   name=\"role\"\n *   label=\"Role\"\n *   defaultSelectedKey={\"member\"}\n *   items={[\n *     { id: \"member\", name: \"Member\" },\n *     { id: \"admin\", name: \"Admin\" },\n *   ]}\n * >\n *   {(item) => <Oui.ListBoxItem>{item.name}</Oui.ListBoxItem>}\n * </Oui.SelectEx>\n * ```\n */\nexport function SelectEx<T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  items,\n  buttonClassName,\n  renderSelectValue,\n  ...props\n}: SelectExProps<T>) {\n  return (\n    <Select {...props}>\n      {label && <Label>{label}</Label>}\n      <SelectButton className={buttonClassName}>\n        <SelectValue>{renderSelectValue}</SelectValue>\n      </SelectButton>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>\n        <Rac.ListBox items={items}>{children}</Rac.ListBox>\n      </Popover>\n    </Select>\n  );\n}\n\ninterface SelectEx1Props<T extends object>\n  extends Omit<Rac.SelectProps<T>, \"children\"> {\n  label?: React.ReactNode;\n  description?: React.ReactNode;\n  errorMessage?: string | ((validation: Rac.ValidationResult) => string);\n  children: React.ReactNode;\n  buttonClassName?: string;\n  /**\n   * A render function to customize the display of the selected value or placeholder.\n   * Receives `isPlaceholder` and `defaultChildren` (the placeholder string or default rendered item).\n   */\n  renderSelectValue?: (\n    props: Rac.SelectValueRenderProps<T> & {\n      defaultChildren: React.ReactNode | undefined;\n    },\n  ) => React.ReactNode;\n}\n\n/**\n * Children are rendered as the contents of Popover and not in a ListBox.\n * Useful for Autocomplete.\n *\n * @example\n *\n * ```tsx\n * <Oui.SelectEx1 label=\"Users\" defaultSelectedKey={users[0].id}>\n *   <Oui.AutocompleteEx\n *     placeholder=\"Select user...\"\n *     searchFieldProps={{ \"aria-label\": \"User\", autoFocus: true }}\n *   >\n *     <Rac.ListBox items={users}>\n *       {(item) => (\n *         <Oui.ListBoxItem id={item.userId}>\n *           {item.username}\n *         </Oui.ListBoxItem>\n *       )}\n *     </Rac.ListBox>\n *   </Oui.AutocompleteEx>\n * </Oui.SelectEx1>\n * ```\n */\nexport function SelectEx1<T extends object>({\n  label,\n  description,\n  errorMessage,\n  children,\n  buttonClassName,\n  renderSelectValue,\n  ...props\n}: SelectEx1Props<T>) {\n  return (\n    <Select {...props}>\n      {label && <Label>{label}</Label>}\n      <SelectButton className={buttonClassName}>\n        <SelectValue>{renderSelectValue}</SelectValue>\n      </SelectButton>\n      {description && <Text slot=\"description\">{description}</Text>}\n      <FieldError>{errorMessage}</FieldError>\n      <Popover>{children}</Popover>\n    </Select>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}