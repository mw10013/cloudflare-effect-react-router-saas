{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "oui-modal",
  "type": "registry:ui",
  "dependencies": [
    "react-aria-components"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "../oui/src/oui-modal.tsx",
      "content": "import type { VariantProps } from \"class-variance-authority\";\nimport { cva } from \"class-variance-authority\";\nimport * as Rac from \"react-aria-components\";\nimport { twMerge } from \"tailwind-merge\";\nimport { composeTailwindRenderProps } from \"./oui-base\";\n\n/**\n * Derived from shadcn DialogOverlay.\n * Includes `fill-mode-forwards` in `data-[exiting]` to prevent animation snapback.\n */\nexport function ModalOverlay({ className, ...props }: Rac.ModalOverlayProps) {\n  return (\n    <Rac.ModalOverlay\n      className={composeTailwindRenderProps(className, [\n        \"fixed inset-0 z-50 bg-black/50\",\n        \"data-[entering]:animate-in data-[entering]:fade-in-0\",\n        \"data-[exiting]:animate-out data-[exiting]:fade-out-0 data-[exiting]:fill-mode-forwards\",\n      ])}\n      {...props}\n    />\n  );\n}\n\n/**\n * Derived from shadcn DialogContent.\n */\nexport function Modal({ className, ...props }: Rac.ModalOverlayProps) {\n  return (\n    <Rac.Modal\n      data-slot=\"modal\"\n      className={composeTailwindRenderProps(className, [\n        \"bg-background fixed left-[50%] top-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n        \"data-[entering]:animate-in data-[entering]:fade-in-0 data-[entering]:zoom-in-95\",\n        \"data-[exiting]:animate-out data-[exiting]:fade-out-0 data-[exiting]:zoom-out-95 data-[exiting]:fill-mode-forwards\", // fill-mode-forwards prevents animation snapback\n      ])}\n      {...props}\n    />\n  );\n}\n\nexport interface ModalExProps extends Rac.ModalOverlayProps {\n  overlayClassName?: Rac.ModalOverlayProps[\"className\"];\n}\n\n/**\n * Composes ModalOverlay and Modal.\n * `className` is applied to Modal, `overlayClassName` and other props are applied to ModalOverlay.\n */\nexport function ModalEx({\n  className,\n  overlayClassName,\n  children,\n  ...props\n}: ModalExProps) {\n  return (\n    <ModalOverlay className={overlayClassName} {...props}>\n      <Modal className={className}>{children}</Modal>\n    </ModalOverlay>\n  );\n}\n\n/**\n * Derived from shadcn SheetContent.\n * Merges with modalStyles so resets zoom and positioning.\n */\nexport const sheetModalVariants = cva(\n  [\n    \"bg-background fixed left-auto top-auto z-50 flex max-w-none translate-x-0 translate-y-0 flex-col gap-4 rounded-none shadow-lg transition ease-in-out sm:max-w-none\",\n    \"data-[entering]:animate-in data-[entering]:zoom-in-100 data-[entering]:duration-500\",\n    \"data-[exiting]:animate-out data-[exiting]:fill-mode-forwards data-[exiting]:zoom-out-100 data-[exiting]:duration-300\",\n  ],\n  {\n    variants: {\n      side: {\n        right:\n          \"data-[entering]:slide-in-from-right data-[exiting]:slide-out-to-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n        left: \"data-[entering]:slide-in-from-left data-[exiting]:slide-out-to-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n        top: \"data-[entering]:slide-in-from-top data-[exiting]:slide-out-to-top inset-x-0 top-0 h-auto border-b\",\n        bottom:\n          \"data-[entering]:slide-in-from-bottom data-[exiting]:slide-out-to-bottom inset-x-0 bottom-0 h-auto border-t\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  },\n);\n\nexport interface ModalEx1Props\n  extends Rac.ModalOverlayProps,\n    Pick<VariantProps<typeof sheetModalVariants>, \"side\"> {\n  overlayClassName?: Rac.ModalOverlayProps[\"className\"];\n}\n\n/**\n * A modal that slides in from an edge of the screen, suitable for a \"Sheet\" component.\n * Derived from shadcn SheetContent.\n * @param side - The side of the screen from which the modal will enter.\n */\nexport function ModalEx1({\n  className,\n  overlayClassName,\n  children,\n  side,\n  ...props\n}: ModalEx1Props) {\n  return (\n    <ModalOverlay className={overlayClassName} {...props}>\n      <Modal\n        className={Rac.composeRenderProps(className, (className, renderProps) =>\n          twMerge(sheetModalVariants({ ...renderProps, side, className })),\n        )}\n      >\n        {children}\n      </Modal>\n    </ModalOverlay>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}